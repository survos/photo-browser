{% extends '@KnpMenu/menu.html.twig' %}
{% import "knp_menu.html.twig" as macros %}

{% block item %}
    <!-- Rendering menu {{ item.name  }} -->
    {% if item.displayed %}
        {%- set attributes = item.attributes %}
        {%- set is_dropdown = attributes.dropdown|default(false) %}
        {%- set divider_prepend = attributes.divider_prepend|default(false) %}
        {%- set divider_append = attributes.divider_append|default(false) %}

        {# unset bootstrap specific attributes #}
        {%- set attributes = attributes|merge({'dropdown': null, 'divider_prepend': null, 'divider_append': null }) %}

        {%- if divider_prepend %}
            {{ block('dividerElement') }}
        {%- endif %}

        {# building the class of the item #}
        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
        {%- if matcher.isCurrent(item) %}
            {%- set classes = classes|merge([options.currentClass]) %}
        {%- elseif matcher.isAncestor(item, options.matchingDepth) %}
            {%- set classes = classes|merge([options.ancestorClass]) %}
        {%- endif %}
        {%- if item.actsLikeFirst %}
            {%- set classes = classes|merge([options.firstClass]) %}
        {%- endif %}
        {%- if item.actsLikeLast %}
            {%- set classes = classes|merge([options.lastClass]) %}
        {%- endif %}

        {# building the class of the children #}
        {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
        {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}

        {# adding classes for dropdown #}
        {%- if is_dropdown %}
            {%- set classes = classes|merge(['dropdown']) %}
            {%- set childrenClasses = childrenClasses|merge(['dropdown-menu']) %}
        {%- endif %}

        {# putting classes together #}
        {%- if classes is not empty %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {%- endif %}
        {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}

        {# displaying the item #}
        <li{{ macros.attributes(attributes) }}>
            {%- if is_dropdown %}
                {{ block('dropdownElement') }}
            {%- elseif item.uri is not empty and (not item.current or options.currentAsLink) %}
                {{ block('linkElement') }}
            {%- else %}
                {{ block('spanElement') }}
            {%- endif %}
            {# render the list of children#}
            {{ block('list') }}
        </li>

        {%- if divider_append %}
            {{ block('dividerElement') }}
        {%- endif %}
    {% endif %}
    <!-- End Rendering menu {{ item.name  }} -->
{% endblock %}

{% block dividerElement %}
    {% if item.level == 1 %}
        <li class="divider"></li>
    {% else %}
        <li class="divider"></li>
    {% endif %}
{% endblock %}

{% block icon %}
    {% if item.extra('icon') is not empty %}
        {% spaceless %}
            {% set icon = item.extra('icon') %}
            {% if icon|trans != icon %}
                <i class="{{ icon|trans }}"></i>
            {% else %}
                {# this way is probably old, depends on fontawesome, etc. #}
                {% for icon in item.extra('icon')|split(' ') %}
                    <i class="fa fw {{ icon }}"></i>
                {% endfor %}
            {% endif %}
        {% endspaceless %}
    {% endif %}
    {% if item.extra('icon_badge') is not empty and item.extra('icon_badge') != '0' %}
        <em>{{ item.extra('icon_badge') }}</em>
    {% endif %}
{% endblock %}

{% block counts %}
    {% if item.extra('counts') > 0 %}
        <span class="menu-item-count">{{ item.extra('counts') }} </span>
    {% endif %}
{% endblock %}

{% block linkElement %}
    {% spaceless %}
        <a href="{{ item.uri }}"{{ macros.attributes(item.linkAttributes) }}>
            {{ block('icon') }} <span class="menu_label">{{ block('label') }}</span>
            {{ block('counts') }}
        </a>
    {% endspaceless %}
{% endblock %}

{% block spanElement %}
    {% spaceless %}

        <a {{ macros.attributes(item.labelAttributes) }}>
            {% if item.extra('icon') is not empty %}
                {{ block('icon') }}
                {{ dump(item) }}
                {#
                <i class="{{ item.extra('icon') }}"></i>
                #}
                {% if item.extra('icon_badge') is not empty and item.extra('icon_badge') != 0 %}
                    <em> {{ item.extra('icon_badge') }}</em>
                {% endif %}
            {% endif %}
            <span class="menu-item-parent">
            {{ block('label') }}
                {{ block('counts') }}
        </span>
        </a>
    {% endspaceless %}
{% endblock %}

{% block dropdownElement %}
    {% spaceless %}
        {%- set classes = item.linkAttribute('class') is not empty ? [item.linkAttribute('class')] : [] %}
        {%- set classes = classes|merge(['dropdown-toggle']) %}
        {%- set attributes = item.linkAttributes %}
        {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {%- set attributes = attributes|merge({'data-menu-toggle': 'dropdown'}) %}
        <a href="#"{{ macros.attributes(attributes) }}>
            {% if item.extra('icon') is not empty %}
                {{ block('icon') }}
                {# shouldn't this be a macro rather than a block?
                <i class="fa {{ item.extra('icon') }}"></i>
                #}
            {% endif %}
            {% set label = block('label') %}
            {% if label|default(false) %}<span>{{ label }}</span>{% endif %}{{ block('counts') }}<span class="caret"></span>
        </a>
    {% endspaceless %}
{% endblock %}

{# This is supposedly from the base twig file, but something seems wrong with the versioning #}
{% block label %}
    {%- set translation_domain = item.extra('translation_domain', 'messages') -%}
    {%- set label = item.label -%}
    {%- if translation_domain is not same as(false) -%}
        {% if ' ' not in label and (label|title != label )%}
            {% if '.label' not in label %}
                {% set label = 'menu.%s.label'|format(label) %}
            {% endif %}
            {# hack -- if there's a space or capital letter, then don't translate #}
            {%- set label = label|trans(item.extra('translation_params', {}), translation_domain) -%}
        {% endif %}
    {%- endif -%}
    {%- if options.allow_safe_labels and item.extra('safe_label', false) %}{{ label|raw }}{% else %}{{ label }}{% endif -%}
{% endblock %}
